// This file is auto-generated by taxi v1.2.0, DO NOT EDIT!

using System;
using System.IO;
using System.Collections.Generic;

namespace Config
{

// 兵种属性配置, 兵种.xlsx
public class SoldierPropertyDefine
{
    public string  Name = "";                 // 士兵ID
    public int     Level = 0;                 // 士兵等级
    public string  NameID = "";               // 名字
    public string  Description = "";          // 描述
    public string  BuildingName = "";         // 所属建筑
    public uint    BuildingLevel = 0;         // 建筑等级
    public uint    RequireSpace = 0;          // 登陆艇占用空间
    public uint    Volume = 0;                // 体积
    public uint    UpgradeTime = 0;           // 升级消耗的时间(秒）
    public string  UpgradeMaterialID = "";    // 升级消耗的材料
    public int     UpgradeMaterialNum = 0;    // 升级消耗的数量
    public string  ConsumeMaterial = "";      // 生产消耗的材料
    public int     ConsumeMaterialNum = 0;    // 生产消耗的数量
    public int     ConsumeTime = 0;           // 生产消耗的时间（秒/个）
    public int     Act = 0;                   // 攻击
    public int     Hp = 0;                    // 血量
    public int     BombLoad = 0;              // 载弹量
    public uint    Hurt = 0;                  // buff伤害
    public float   Duration = 0.0f;           // 持续时间
    public float   TriggerInterval = 0.0f;    // 触发间隔
    public float   SearchScope = 0.0f;        // 搜索范围
    public float   AtkFrequency = 0.0f;       // 攻击间隔
    public float   AtkRange = 0.0f;           // 攻击距离
    public float   MovingSpeed = 0.0f;        // 移动速度

    public static SoldierPropertyDefine[] Data { get; private set; } 

    // parse object fields from a text row
    public void ParseFromRow(string[] row)
    {
        if (row.Length < 24) {
            throw new ArgumentException(string.Format("SoldierPropertyDefine: row length out of index {0}", row.Length));
        }
        if (row[0].Length > 0) {
            this.Name = row[0].Trim();
        }
        if (row[1].Length > 0) {
            this.Level = int.Parse(row[1]);
        }
        if (row[2].Length > 0) {
            this.NameID = row[2].Trim();
        }
        if (row[3].Length > 0) {
            this.Description = row[3].Trim();
        }
        if (row[4].Length > 0) {
            this.BuildingName = row[4].Trim();
        }
        if (row[5].Length > 0) {
            this.BuildingLevel = uint.Parse(row[5]);
        }
        if (row[6].Length > 0) {
            this.RequireSpace = uint.Parse(row[6]);
        }
        if (row[7].Length > 0) {
            this.Volume = uint.Parse(row[7]);
        }
        if (row[8].Length > 0) {
            this.UpgradeTime = uint.Parse(row[8]);
        }
        if (row[9].Length > 0) {
            this.UpgradeMaterialID = row[9].Trim();
        }
        if (row[10].Length > 0) {
            this.UpgradeMaterialNum = int.Parse(row[10]);
        }
        if (row[11].Length > 0) {
            this.ConsumeMaterial = row[11].Trim();
        }
        if (row[12].Length > 0) {
            this.ConsumeMaterialNum = int.Parse(row[12]);
        }
        if (row[13].Length > 0) {
            this.ConsumeTime = int.Parse(row[13]);
        }
        if (row[14].Length > 0) {
            this.Act = int.Parse(row[14]);
        }
        if (row[15].Length > 0) {
            this.Hp = int.Parse(row[15]);
        }
        if (row[16].Length > 0) {
            this.BombLoad = int.Parse(row[16]);
        }
        if (row[17].Length > 0) {
            this.Hurt = uint.Parse(row[17]);
        }
        if (row[18].Length > 0) {
            this.Duration = float.Parse(row[18]);
        }
        if (row[19].Length > 0) {
            this.TriggerInterval = float.Parse(row[19]);
        }
        if (row[20].Length > 0) {
            this.SearchScope = float.Parse(row[20]);
        }
        if (row[21].Length > 0) {
            this.AtkFrequency = float.Parse(row[21]);
        }
        if (row[22].Length > 0) {
            this.AtkRange = float.Parse(row[22]);
        }
        if (row[23].Length > 0) {
            this.MovingSpeed = float.Parse(row[23]);
        }
    }

    public static void LoadFromLines(List<string> lines)
    {
        var list = new SoldierPropertyDefine[lines.Count];
        for(int i = 0; i < lines.Count; i++)
        {
            string line = lines[i];
            var row = line.Split(',');
            var obj = new SoldierPropertyDefine();
            obj.ParseFromRow(row);
            list[i] = obj;
        }
        Data = list;
    }

    // get an item by key
    public static SoldierPropertyDefine Get(string Name, int Level)
    {
        foreach (SoldierPropertyDefine item in Data)
        {
            if (item.Name == Name && item.Level == Level)
            {
                return item;
            }
        }
        return null;
    }

    // get a range of items by key
    public static List<SoldierPropertyDefine> GetRange(string Name)
    {
        var range = new List<SoldierPropertyDefine>();
        foreach (SoldierPropertyDefine item in Data)
        {
            if (item.Name == Name)
            {
                range.Add(item);
            }
        }
        return range;
    }

}

public class AutogenConfigManager
{

    public delegate void ContentReader(string filepath, Action<string> cb);
    
    public static ContentReader reader = ReadFileContent;
    
    public static bool ParseBool(string text)
    {
        if (text.Length > 0)
        {
            return string.Equals(text, "1") ||
                string.Equals(text, "on", StringComparison.OrdinalIgnoreCase) ||
                string.Equals(text, "yes", StringComparison.OrdinalIgnoreCase) ||
                string.Equals(text, "true", StringComparison.OrdinalIgnoreCase);
        }
        return false;
    }
        
    public static List<string> ReadTextToLines(string content)
    {
        List<string> lines = new List<string>();
        using (StringReader reader = new StringReader(content))
        {
            string line;
            while ((line = reader.ReadLine()) != null)
            {
                lines.Add(line);
            }
        }
        return lines;
    }
    
    public static void ReadFileContent(string filepath, Action<string> cb)
    {
        StreamReader reader = new StreamReader(filepath);
        var content = reader.ReadToEnd();
        cb(content);
    }
    
    public static void LoadAllConfig(Action completeFunc) 
    {
        reader("soldier_property_define.csv", (content) =>
        {
            var lines = ReadTextToLines(content);
            SoldierPropertyDefine.LoadFromLines(lines);

            if (completeFunc != null) completeFunc();
        });

    }
}


}
