// This file is auto-generated by taxi v0.3.3, DO NOT EDIT!

#include "stdafx.h"
#include <stddef.h>
#include <memory>
#include "AutogenConfig.h"
#include "Utility/Conv.h"
#include "Utility/StringUtil.h"
#include "Resource/ResourceManager.h"

using namespace std;


// parse value from text
template <typename T>
inline T ParseValue(StringPiece text)
{
    text = trimWhitespace(text);
    if (text.empty())
    {
        return T();
    }
    return to<T>(text);
}

namespace config
{

namespace 
{
    static GlobalPropertyDefine* _instance_globalpropertydefine = nullptr;
}

void AutogenConfigManager::LoadAll()
{
    GlobalPropertyDefine::Load();
}

void AutogenConfigManager::ClearAll()
{
    delete _instance_globalpropertydefine;
    _instance_globalpropertydefine = nullptr;
}

//Load content of an asset file
std::string AutogenConfigManager::ReadFileContent(const std::string& filepath)
{
    const string& path = CResourceManager::GetInstance()->GetResourcePath(eRT_Resource) + filepath;
    CSerializer serializer(path.c_str());
    return string((const char*)serializer.GetBuffer(), serializer.GetWritePos());
}


const GlobalPropertyDefine* GlobalPropertyDefine::Instance()
{
    BEATS_ASSERT(_instance_globalpropertydefine != nullptr);
    return _instance_globalpropertydefine;
}

// load data from csv file
int GlobalPropertyDefine::Load(const char* filepath /* = nullptr */)
{
    if (filepath == nullptr)
    {
        filepath = "/csv/globalpropertydefine.csv";
    }
    string content = AutogenConfigManager::ReadFileContent(filepath);
    vector<vector<StringPiece>> rows;
    auto lines = Split(content, "\r\n");
    BEATS_ASSERT(!lines.empty());
    for (size_t i = 0; i < lines.size(); i++)
    {
        if (!lines[i].empty())
        {
            const auto& row = Split(lines[i], ",");
            if (!row.empty())
            {
                rows.push_back(row);
            }
        }
    }
    GlobalPropertyDefine* dataptr = new GlobalPropertyDefine();
    GlobalPropertyDefine::ParseFromRows(rows, dataptr);
    delete _instance_globalpropertydefine;
    _instance_globalpropertydefine = dataptr;
    return 0;
}

// parse data object from csv rows
int GlobalPropertyDefine::ParseFromRows(const vector<vector<StringPiece>>& rows, GlobalPropertyDefine* ptr)
{
    BEATS_ASSERT(rows.size() >= 9 && rows[0].size() >= 3);
    BEATS_ASSERT(ptr != nullptr);
    ptr->GoldExchangeTimeFactor1 = ParseValue<float>(rows[0][3]);
    ptr->GoldExchangeTimeFactor2 = ParseValue<float>(rows[1][3]);
    ptr->GoldExchangeTimeFactor3 = ParseValue<float>(rows[2][3]);
    ptr->GoldExchangeResource1Price = ParseValue<uint32_t>(rows[3][3]);
    ptr->GoldExchangeResource2Price = ParseValue<uint32_t>(rows[4][3]);
    ptr->GoldExchangeResource3Price = ParseValue<uint32_t>(rows[5][3]);
    ptr->GoldExchangeResource4Price = ParseValue<uint32_t>(rows[6][3]);
    ptr->FreeCompleteSeconds = ParseValue<uint32_t>(rows[7][3]);
    ptr->CancelBuildReturnPercent = ParseValue<uint32_t>(rows[8][3]);
    return 0;
}


} // namespace config 
